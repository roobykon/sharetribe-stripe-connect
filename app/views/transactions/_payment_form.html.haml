= form_tag new_transaction_path(listing_id: @listing.id), :method => :get, :id => "booking-dates" do
  - if [:day, :night].include?(@listing.quantity_selector&.to_sym)
    - blocked_dates_result.on_success do |blocked_dates|
      - days = [:sunday, :monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday]
      - months = [:january, :february, :march, :april, :may, :june, :july, :august, :september, :october, :november, :december]
      - translated_days = days.map { |day_symbol| t("datepicker.days.#{day_symbol}") }.to_json
      - translated_days_short = days.map { |day_symbol| t("datepicker.days_short.#{day_symbol}") }.to_json
      - translated_days_min = days.map { |day_symbol| t("datepicker.days_min.#{day_symbol}") }.to_json
      - translated_months = months.map { |day_symbol| t("datepicker.months.#{day_symbol}") }.to_json
      - translated_months_short = months.map { |day_symbol| t("datepicker.months_short.#{day_symbol}") }.to_json

      - content_for :extra_javascript do
        :javascript

            var disabledDates = [
              #{blocked_dates.map { |d| "new Date(#{d.to_i * 1000})" }.join(",")}
            ];

            $.fn.datepicker.dates['#{I18n.locale}'] = {
              days: #{translated_days},
              daysShort: #{translated_days_short},
              daysMin: #{translated_days_min},
              months: #{translated_months},
              monthsShort: #{translated_months_short},
              today: "#{t("datepicker.today")}",
              weekStart: #{t("datepicker.week_start", default: 0)},
              clear: "#{t("datepicker.clear")}",
              format: "#{t("datepicker.format")}"
            }
            $.validator.addMethod("night_selected",
              function(value, element, params) {
                var startVal = $(params.startOnSelector).val()
                if (!!startVal == false) {
                  return true;
                } else {
                  return startVal !== value
                }
              });
            $.validator.addMethod("availability_range",
              function(value, element, params) {
                var startVal = $(params.startOnSelector).datepicker('getDates');
                var endVal = $(element).datepicker('getDates');

                if (!startVal || startVal.length !== 1 || !endVal || endVal.length !== 1) {
                  return false;
                }

                var startDate = startVal[0].getTime();
                var endDate = endVal[0].getTime();

                // Validate that all booked dates are outside the selected range
                return disabledDates.every(function(d) {
                  var date = d.getTime();
                  if (startDate === endDate) {
                    return date !== startDate;
                  }
                  return date < startDate || date >= endDate;
                });
              });
            var rules = #{@listing.quantity_selector&.to_sym == :night} ? {
              "end_on": {
                night_selected: {startOnSelector: "#start-on"},
                availability_range: {startOnSelector: "#start-on"}
              }
            } : {
              "end_on": {
                availability_range: {startOnSelector: "#start-on"}
              }
            };
            $("#booking-dates").validate({
              rules: rules,
              submitHandler: function(form) {
                var $form = $(form);
                $form.find("#start-on").attr("name", "");
                $form.find("#end-on").attr("name", "");

                form.submit();
              }
            });

            var endDate = new Date(#{blocked_dates_end_on.to_i * 1000});
            var nightPicker = #{@listing.quantity_selector.to_sym == :night};

            window.ST.initializeFromToDatePicker('datepicker', {disabledDates: disabledDates, endDate: endDate, nightPicker: nightPicker });
      .input-daterange.input-group.clearfix#datepicker{:data => {:locale => I18n.locale, :dateformat => t("datepicker.format")}}
        .datepicker-start-wrapper
          = label_tag t(".booking_from")
          %input.input-sm.form-control.required#start-on{:type => 'text', :name => "start_on", :placeholder => t("datepicker.format"), :data => { :output => "booking-start-output" } }
          %input#booking-start-output{:type => 'hidden', :name => 'start_on'}

        .datepicker-end-wrapper
          = label_tag t(".booking_to")
          %input.input-sm.form-control.required#end-on{:type => 'text', :name => "end_on", :placeholder => t("datepicker.format"), :data => { :output => "booking-end-output" }}
          %input#booking-end-output{:type => 'hidden', :name => 'end_on'}

    - blocked_dates_result.on_error do
      = t("listings.listing_actions.unable_load_availability")

  - elsif @listing.unit_type.present?
    - delivery_type = delivery_opts.length > 0 ? delivery_opts.first[:name].to_s : ""
    - shipping_price_additional = delivery_opts.length > 0 ? delivery_opts.first[:shipping_price_additional] : nil
    - content_for :extra_javascript do
      :javascript
          $("#booking-dates").validate({
            errorPlacement: function(error, element) {
              if (element.is("#quantity")) {
                error.insertAfter(".quantity-wrapper");
              } else {
                error.insertAfter(element);
              }
            }
          });
          window.ST.initializeQuantityValidation({validate: "positiveIntegers", input: "quantity", errorMessage: "#{t("errors.messages.positive_number")}" });
          if ("#{delivery_type}" == "shipping" && #{shipping_price_additional != nil}) {
            window.ST.initializeShippingPriceTotal('#quantity', '.delivery-price-value', '#{Maybe(delivery_opts)[0][:price].currency.decimal_mark.or_else(".")}');
          }

    .quantity-wrapper.input-group.clearfix
      .quantity-label-wrapper
        %label.quantity-label{for: 'quantity'}
          = ListingViewUtils.translate_quantity(@listing.unit_type, @listing.unit_selector_tr_key)
      .quantity-input.input-sm.required
        %input#quantity{type: 'number', placeholder: t("listings.quantity_placeholder"), name: 'quantity', value: 1, min: 1, step: 1}

  = render partial: 'listings/delivery_opts', locals: { delivery_opts: locals[:delivery_opts], is_author: locals[:is_author] }

  = hidden_field_tag(:listing_id, @listing.id)

  - locals[:blocked_dates_result].on_success do
    %button.enabled-book-button.status-link{style: 'background: rgb(238, 96, 89)'}
      .content
        = action_button_label(@listing)

  - locals[:blocked_dates_result].on_error do
    %button.disabled-book-button.status-link{disabled: true}
      .content
        = action_button_label(@listing)